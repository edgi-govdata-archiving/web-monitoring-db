# DB-related rake commands execute on both development *and* test environments
# when the current environment is development, but that means the env vars in
# .env.test get missed when running rake in development but operating on the
# test DB. Fix by loading test DATABASE_* vars into DATABASE_*_TEST ◔̯◔
<%
  if Rails.env.development? || Rails.env.test?
    # Copy current environment and overlay test-specific config onto it
    test_env = {}.update(ENV).update(Dotenv.parse('.env.test'))

    # Copy any `DATABASE_*` variables to current env as `DATABASE_*_TEST`
    test_env.each do |key, value|
      ENV["#{key}_TEST"] = value if key.start_with?('DATABASE')
    end
  end
%>
default: &default
  adapter: postgresql
  encoding: unicode
  # For details on connection pooling, see rails configuration guide
  # http://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  host: localhost
  # For more about other options available here, see the guide:
  # https://guides.rubyonrails.org/configuring.html#configuring-a-database

development:
  <<: *default
  database: web-monitoring-db_development

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: web-monitoring-db_test
  url: <%= ENV['DATABASE_URL_TEST'] %>

production:
  <<: *default
  # Require explicit, complete DB configuration as a URL.
  # NOTE: DATABASE_RDS is temporary, and allows us to transition databases from
  # Heroku to AWS RDS before moving the whole application itself (because
  # Heroku auto-manages DATABASE_URL, changes we make to it won't stick)
  url: <%= ENV['DATABASE_RDS'] || ENV['DATABASE_URL'] %>
