swagger: '2.0'
info:
  description: >-
    The web application that brokers snapshots of webpages archived by various
    third parties and 'diffs' between these versions.
  version: v0
  title: web-monitoring-db
  license:
    name: GPL 3
    url: >-
      https://github.com/edgi-govdata-archiving/web-monitoring-db/blob/master/LICENSE
host: web-monitoring-db.herokuapp.com
basePath: /api/v0
tags:
  - name: pages and versions
    description: Logical Pages tracked and their Versions (snapshots)
  - name: changes
    description: comparisons between two Versions
  - name: imports
    description: Bulk-importing Versions
schemes:
  - https
paths:
  /pages:
    get:
      tags:
        - pages and versions
      summary: List tracked Pages
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: chunk
          in: query
          description: pagination parameter
          required: false
          type: integer
          default: 1
        - name: chunk_size
          in: query
          description: number of items per chunk
          required: false
          type: integer
          default: 100
        - name: site
          in: query
          description: Filter results by site.
          required: false
          type: string
        - name: agency
          in: query
          description: Filter results by agency.
          required: false
          type: string
        - name: url
          in: query
          description: Match Page url (may include wildcard *).
          required: false
          type: string
        - name: title
          in: query
          description: >-
            Filter results by title. Exact matches only. Unoptimized
            performance.
          required: false
          type: string
        - name: include_versions
          in: query
          description: >-
            If true, add a versions key to the each item with the output of
            /pages/{page_id}/versions inlined.
          required: false
          type: string
          default: false
        - name: include_latest
          in: query
          description: >-
            If true, add a latest key to the each item with the latest version.
          required: false
          type: string
          default: false
        - name: source_type
          in: query
          description: >-
            Only include pages with at least one versions of this source type.
          required: false
          type: string
        - name: hash
          in: query
          description: >-
            Only include the pages that have at least one version with this hash.
          required: false
          type: string
        - name: capture_time
          type: string
          in: query
          description: >-
            Only retrieve pages with versions captured during this time frame. Should be in the format `{start date}..{end date}`, where dates are ISO 8601 formatted. Either date can be left out to make the query open-ended.

            **Examples:**

            - `capture_time=2017-02-01..2017-03-01` for all of February

            - `capture_time=2017-02-01T10:00:00Z..2017-02-01T12:00:00` for February 1st between 10am and noon UTC

            - `capture_time=2017-02-01..` for all versions from February on

            - `capture_time=..2017-02-01` for all versions before February

      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/PageOfPages'
  '/pages/{page_id}':
    get:
      tags:
        - pages and versions
      summary: Get a specific Page
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page to return
          required: true
          type: string
          format: uuid4
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SinglePage'
  '/pages/{page_id}/versions':
    get:
      tags:
        - pages and versions
      summary: Get all the Versions for a specific Page
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page to return
          required: true
          type: string
          format: uuid4
        - name: chunk
          in: query
          description: pagination parameter
          required: false
          type: integer
          default: 1
        - name: chunk_size
          in: query
          description: number of items per chunk
          required: false
          type: integer
          default: 100
        - name: capture_time
          in: query
          description: >-
            filter by capture time; may also be specified as a range given as
            time..time such as 2017-04-01T10:00Z..2017-04-01T12:00Z
          required: false
          type: string
        - name: source_metadata[:key]
          type: string
          in: query
          description: >-
            Filter results by a given `key` in the `source_metadata` field. You
            can include this parameter multiple times to filter by more than
            one `key`. *Note that this field is not indexed, so these queries
            can be slow.* Examples:

            - `/api/v0/versions?source_metadata[version_id]=12345678`

            - `/api/v0/versions?source_metadata[account]=versionista1&source_metadata[has_content]=true`
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/PageOfVersions'
    post:
      tags:
        - pages and versions
      summary: Submit one new Version (see also imports)
      description: >-
        Add a single new version of a page to the database. For importing
        multiple versions at a time, use the `/imports` API.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: uuid
          in: query
          description: uuid of new Version to store
          required: true
          type: string
          format: uuid4
        - name: capture_time
          in: query
          description: capture_time new Version to store
          required: true
          type: string
          format: datetime
        - name: uri
          in: query
          description: URI of content of new Version to store
          required: true
          type: string
        - name: version_hash
          in: query
          description: sha256 hash of Version content
          required: true
          type: string
        - name: source_type
          in: query
          description: 'source, such as internet_archive'
          required: true
          type: string
        - name: source_metadata
          in: query
          description: >-
            A JSON blob containing extra source specific information.  This
            field is free-form, but we generally expect the data will follow
            one of the formats documented under the models section that has a
            name starting with "source_metadata_" For example:
            source_metadata_versionista
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleVersion'
  '/pages/{page_id}/versions/{version_id}':
    get:
      tags:
        - pages and versions
      summary: Get a specific Version
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page whose Version this is
          required: true
          type: string
          format: uuid4
        - name: version_id
          in: path
          description: ID of the Version to show
          required: true
          type: string
          format: uuid4
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleVersion'
  '/pages/{page_id}/changes':
    get:
      tags:
        - changes
      summary: List Changes between two Versions on a page
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page whose Change this is
          required: true
          type: string
          format: uuid4
        - name: chunk
          in: query
          description: pagination parameter
          required: false
          type: integer
          default: 1
        - name: chunk_size
          in: query
          description: number of items per chunk
          required: false
          type: integer
          default: 100
        - name: priority
          in: query
          description: Only include changes with a matching `priority`. This can be a number (to get an exact match) or an interval using standard mathematical syntax, e.g. `[0.3,0.6)` for `0.3 <= priority < 0.6`. You can leave out the start or end, e.g. `[0.3,]` for `priority >= 0.3`.
          required: false
          type: number
        - name: significance
          in: query
          description: Only include changes with a matching `significance`. This can be a number (to get an exact match) or an interval using standard mathematical syntax, e.g. `[0.3,0.6)` for `0.3 <= significance < 0.6`. You can leave out the start or end, e.g. `[0.3,]` for `significance >= 0.3`.
          required: false
          type: number
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/PageOfChanges'
  '/pages/{page_id}/changes/{from_version}..{to_version}':
    get:
      tags:
        - changes
      summary: Get a Change between two Versions
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page whose Change this is
          required: true
          type: string
          format: uuid4
        - name: from_version
          in: path
          description: ID of the "before" Version. If omitted, it will be treated as the version immediately prior to `to_version`.
          required: false
          type: string
          format: uuid4
        - name: to_version
          in: path
          description: ID of the "after" Version
          required: true
          type: string
          format: uuid4
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleChange'
  '/pages/{page_id}/changes/{from_version}..{to_version}/annotations':
    get:
      tags:
        - changes
      summary: List Anonotations for a Change between two Versions
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page whose Version this is
          required: true
          type: string
          format: uuid4
        - name: from_version
          in: path
          description: >-
            ID of the "before" Version. If omitted, it will be treated as the
            version immediately prior to `to_version`.
          required: false
          type: string
          format: uuid4
        - name: to_version
          in: path
          description: ID of the "after" Version
          required: true
          type: string
          format: uuid4
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/PageOfAnnotations'
    post:
      tags:
        - changes
      summary: Add/update an annotation on a Change between two versions
      description: >-
        The POST body should be a JSON object containing any data desired.

        Users can only make one annotation per Change. If the currently
        signed-in user has not annotated the change between these two versions,
        a new annotation will be created, otherwise their previous annotation
        will be replaced.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page whose Change this is
          required: true
          type: string
          format: uuid4
        - name: from_version
          in: path
          description: >-
            ID of the "before" Version. If omitted, it will be treated as the
            version immediately prior to `to_version`.
          required: false
          type: string
          format: uuid4
        - name: to_version
          in: path
          description: ID of the "after" Version
          required: true
          type: string
          format: uuid4
        - name: annotation
          in: body
          required: true
          schema: {}
          description: >-
            The body is the annotation you wish to add to the change. It is a
            JSON object with keys and values desired.
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Annotation'
  '/pages/{page_id}/changes/{from_version}..{to_version}/annotations/{annotation_id}':
    get:
      tags:
        - changes
      summary: Single Anonotations for a Change between two Versions
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page whose Version this is
          required: true
          type: string
          format: uuid4
        - name: from_version
          in: path
          description: >-
            ID of the "before" Version. If omitted, it will be treated as the
            version immediately prior to `to_version`.
          required: false
          type: string
          format: uuid4
        - name: to_version
          in: path
          description: ID of the "after" Version
          required: true
          type: string
          format: uuid4
        - name: annotation_id
          in: path
          description: ID of the annotation
          required: true
          type: string
          format: uuid4
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleAnnotation'
  '/pages/{page_id}/changes/{from_version}..{to_version}/diff/{diff_type}':
    get:
      tags:
        - changes
      summary: Generate a diff between the two versions in a change.
      description: >-
        The system can generate diffs according to a variety of algorithms. Most of these are provided by the `web-monitoring-processing` project. Some diffs can take query parameters for greater customization.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page whose versions are being diffed
          required: true
          type: string
          format: uuid4
        - name: from_version
          in: path
          description: >-
            ID of the "before" Version. If omitted, it will be treated as the
            version immediately prior to `to_version`.
          required: false
          type: string
          format: uuid4
        - name: to_version
          in: path
          description: ID of the "after" Version
          required: true
          type: string
          format: uuid4
        - name: diff_type
          in: path
          description: >
            Type of diff to generate. Possible values are…
              * `length` - the difference between length, in bytes, of each version
              * `identical_bytes` - a boolean indicating whether the two versions are identical
              * `side_by_side_text` - the visible text of each version formatted as
                ```
                {a_text: "string", b_text: "string"}
                ```
              * `html_source` - additions and removals to the actual source code, formatted as:
                  ```
                  [
                    [-1, "some text that was removed"],
                    [1, "some text that was added"],
                    [0, "some text that was not changed"],
                    [1, "some text that was added"],
                    // and so on
                  ]
                  ```
              * `html_text` - additions and removals to the visible text on the page, formatted as:
                  ```
                  [
                    [-1, "some text that was removed"],
                    [1, "some text that was added"],
                    [0, "some text that was not changed"],
                    [1, "some text that was added"],
                    // and so on
                  ]
                  ```
              * `html_visual` - an HTML page with differences marked up. This is meant to be rendered directly in a web browser.
          required: true
          type: string
          enum:
            - length
            - identical_bytes
            - side_by_side_text
            - html_source
            - html_text
            - html_visual
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Diff'
  /versions:
    get:
      tags:
        - pages and versions
      summary: Get all the Versions
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: chunk
          in: query
          description: pagination parameter
          required: false
          type: integer
          default: 1
        - name: chunk_size
          in: query
          description: number of items per chunk
          required: false
          type: integer
          default: 100
        - name: capture_time
          in: query
          description: >-
            filter by capture time; may also be specified as a range given as
            time..time such as 2017-04-01T10:00Z..2017-04-01T12:00Z
          required: false
          type: string
        - name: source_type
          in: query
          description: Filter by source_type.
          required: false
          type: string
        - name: hash
          in: query
          description: Filter by version_hash.
          required: false
          type: string
        - name: source_metadata[:key]
          in: query
          description: >-
            Filter results by a given `key` in the `source_metadata` field. You
            can include this parameter multiple times to filter by more than
            one `key`. *Note that this field is not indexed, so these queries
            can be slow.* Examples:

            - `/api/v0/versions?source_metadata[version_id]=12345678`

            - `/api/v0/versions?source_metadata[account]=versionista1&source_metadata[has_content]=true`
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/PageOfVersions'
  '/versions/{version_id}':
    get:
      tags:
        - pages and versions
      summary: Get a specific Version
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: version_id
          in: path
          description: ID of Version to return
          required: true
          type: string
          format: uuid4
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleVersion'
  /imports/:
    post:
      tags:
        - imports
      summary: Submit a batch of Versions to create
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: update
          in: query
          type: string
          enum:
            - skip
            - replace
            - merge
          default: skip
          required: false
          description: >
            Specifies how versions that are already in the database (i.e. versions with the same `capture_time` and `source_type`) should be handled.
              * `skip` (default value) Don’t import the version or modify the existing database entry
              * `replace` Replace the existing database entry with the imported one
              * `merge` Similar to `replace`, but merges the values in `source_metadata`
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ImportStatus'
  '/imports/{import_id}':
    get:
      tags:
        - imports
      summary: Query the status of a batch import job
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: import_id
          in: path
          description: 'ID of import job, from the response to the submission'
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ImportStatus'
definitions:
  Version:
    type: object
    properties:
      uuid:
        type: string
        format: uuid4
      page_uuid:
        type: string
        format: uuid4
      capture_time:
        type: string
        format: datetime
      uri:
        type: string
        format: uri
      version_hash:
        type: string
      source_type:
        type: string
      source_metadata:
        type: object
        description: >-
          A JSON blob containing extra source specific information.  This
          field is free-form, but the data will generally follow one of the
          formats documented under the models section that has a name
          starting with "source_metadata_."  For example: source_metadata_versionista
  Page:
    type: object
    properties:
      uuid:
        type: string
        format: uuid4
      url:
        type: string
      title:
        type: string
      site:
        type: string
      agency:
        type: string
      created_at:
        type: string
        format: datetime
      updated_at:
        type: string
        format: datetime
      latest:
        $ref: '#/definitions/Version'
  Change:
    type: object
    properties:
      uuid:
        type: string
        format: uuid4
      uuid_from:
        type: string
        format: uuid4
      uuid_to:
        type: string
        format: uuid4
      priority:
        type: number
        format: float
      significance:
        type: number
        format: float
      current_annotation:
        type: object
      created_at:
        type: string
        format: datetime
      updated_at:
        type: string
        format: datetime
  Annotation:
    type: object
    properties:
      uuid:
        type: string
        format: uuid4
      author_id:
        type: number
        format: int64
      annotation:
        type: object
      from_version:
        type: string
        format: uuid4
      to_version:
        type: string
        format: uuid4
      created_at:
        type: string
        format: datetime
      updated_at:
        type: string
        format: datetime
  SinglePage:
    type: object
    properties:
      data:
        $ref: '#/definitions/Page'
  PageOfPages:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Page'
      links:
        type: object
        properties:
          first:
            type: string
            format: uri
          last:
            type: string
            format: uri
          prev:
            type: string
            format: uri
          next:
            type: string
            format: uri
  SingleVersion:
    type: object
    properties:
      data:
        $ref: '#/definitions/Version'
  PageOfVersions:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Version'
      links:
        type: object
        properties:
          first:
            type: string
            format: uri
          last:
            type: string
            format: uri
          prev:
            type: string
            format: uri
          next:
            type: string
            format: uri
  SingleChange:
    type: object
    properties:
      data:
        $ref: '#/definitions/Change'
      links:
        type: object
        properties:
          page:
            type: string
            format: uri
          from_version:
            type: string
            format: uri
          to_version:
            type: string
            format: uri
  PageOfChanges:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Change'
      links:
        type: object
        properties:
          first:
            type: string
            format: uri
          last:
            type: string
            format: uri
          prev:
            type: string
            format: uri
          next:
            type: string
            format: uri
  ImportStatus:
    type: object
    properties:
      data:
        type: object
        properties:
          user_id:
            type: number
            format: int64
          id:
            type: number
            format: int64
          status:
            type: string
          processing_errors:
            type: array
            items:
              type: string
          file:
            type: string
            format: uuid4
  SingleAnnotation:
    type: object
    properties:
      data:
        $ref: '#/definitions/Annotation'
  PageOfAnnotations:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Annotation'
  source_metadata_versionista:
    type: object
    properties:
      url:
        type: string
      account:
        type: string
      site_id:
        type: string
      page_id:
        type: string
      diff_hash:
        type: string
      version_id:
        type: string
      diff_length:
        type: integer
      has_content:
        type: boolean
      diff_with_first_url:
        type: string
      diff_with_previous_url:
        type: string
  Diff:
    type: object
    properties:
      data:
        type: object
        properties:
          page_id:
            type: string
            format: uuid4
          from_version_id:
            type: string
            format: uuid4
          to_version_id:
            type: string
            format: uuid4
          diff_service:
            type: string
          content:
            type: object
            description: Most responses contain this structure, but what is actually in `content` depends on the type of diff.
            properties:
              diff:
                type: object
              version:
                type: string

externalDocs:
  description: Find out more about the web-monitoring project.
  url: 'https://github.com/edgi-govdata-archiving/web-monitoring'
