swagger: '2.0'
info:
  description: >-
    The web application that brokers snapshots of webpages archived by various
    third parties and 'diffs' between these versions.
  version: v0
  title: web-monitoring-db
  license:
    name: GPL 3
    url: >-
      https://github.com/edgi-govdata-archiving/web-monitoring-db/blob/master/LICENSE
basePath: /api/v0
tags:
  - name: pages and versions
    description: Logical Pages tracked and their Versions (snapshots)
  - name: changes
    description: comparisons between two Versions
  - name: imports
    description: Bulk-importing Versions

parameters:
  sort:
    name: sort
    in: query
    required: false
    type: string
    description: >
      Sort the results. This should be a comma-separated list of sort
      values, where each value is in the form `field:order`, e.g.
      `title:asc,url:desc`. You can sort by any field on the result
      objects.

  chunk:
    name: chunk
    in: query
    description: pagination parameter
    required: false
    type: integer
    default: 1

  chunk_size:
    name: chunk_size
    in: query
    description: number of items per chunk
    required: false
    type: integer
    default: 100

  include_total:
    name: include_total
    in: query
    required: false
    type: boolean
    default: false
    description: >
      If true, inlude the number of total results across all chunks as a field
      called `meta.total_results`. For example, querying
      `/api/v0/pages?include_total` would show the total number of page
      records in the database in that field.

      Note that `links.last` will only be populated if you are already on the
      last chunk *unless this parameter is set to true* (the URL of the
      “last” chunk can’t be determined without counting all possible results).

paths:
  /pages:
    get:
      tags:
        - pages and versions
      summary: List tracked Pages
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/chunk'
        - $ref: '#/parameters/chunk_size'
        - $ref: '#/parameters/include_total'
        - $ref: '#/parameters/sort'
        - name: site
          in: query
          description: Filter results by site.
          required: false
          type: string
        - name: agency
          in: query
          description: Filter results by agency.
          required: false
          type: string
        - name: url
          in: query
          description: Match Page url (may include wildcard *).
          required: false
          type: string
        - name: title
          in: query
          description: >-
            Filter results by title. Exact matches only. Unoptimized
            performance.
          required: false
          type: string
        - name: include_earliest
          in: query
          description: >-
            If true, add an `earliest` key to each page with the earliest version of it. (Note this is not affected by `capture_time`, which only modifies which *pages* are returned.)
          required: false
          type: string
          default: false
        - name: include_latest
          in: query
          description: >-
            If true, add a `latest` key to each page with the latest version of it. (Note this is not affected by `capture_time`, which only modifies which *pages* are returned.)
          required: false
          type: boolean
          default: false
        - name: source_type
          in: query
          description: >-
            Only include pages with at least one versions of this source type.
          required: false
          type: string
        - name: hash
          in: query
          description: >-
            Only include the pages that have at least one version with this hash.
          required: false
          type: string
        - name: capture_time
          type: string
          in: query
          description: >
            Only retrieve pages with versions captured during this time frame. Should be in the format `{start date}..{end date}`, where dates are ISO 8601 formatted. Either date can be left out to make the query open-ended.

            **Examples…**

            - `capture_time=2017-02-01..2017-03-01` for all of February

            - `capture_time=2017-02-01T10:00:00Z..2017-02-01T12:00:00` for February 1st between 10am and noon UTC

            - `capture_time=2017-02-01..` for all versions from February on

            - `capture_time=..2017-02-01` for all versions before February
        - name: 'maintainers[]'
          type: string
          in: query
          description: >
            Only retreive pages with maintainers whose `name`
            matches the value of this field. You can repeat
            this parameter multiple times to match more than one
            maintainer, e.g…

                ?maintainers[]=EPA&maintainers[]=DOE

            The values here are not case-sensitive. Repeated
            matches are a *UNION* or *OR* style grouping; that
            is, you get all pages that have any of the maintainers
            requested, not only pages that have all of the
            maintainers listed.

        - name: 'tags[]'
          type: string
          in: query
          description: >
            Only retreive pages with tags whose `name`
            matches the value of this field. You can repeat
            this parameter multiple times to match more than one
            tag, e.g…

                ?tags[]=site:EPA&tags[]=frequently_updated

            The values here are not case-sensitive. Repeated
            matches are a *UNION* or *OR* style grouping; that
            is, you get all pages that have any of the tags
            requested, not only pages that have all of the
            tags listed.
        - name: active
          in: query
          description: >-
            If set, only include pages that are either active (when set to
            `true`) or inactive (when set to `false`). (If unset, you get all
            pages.) “Inactive” pages are pages that are no longer updated with
            new versions in the database.
          required: false
          type: boolean
        - name: status
          in: query
          type: string
          required: false
          description: >-
            Include only pages with the given HTTP status code, e.g. `200` or
            `404`. You may also specify a range using standard mathematical
            notation for intervals. For example, to get pages with 4XX statuses:

                ?status=[400,500)
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/PageOfPages'
  '/pages/{page_id}':
    get:
      tags:
        - pages and versions
      summary: Get a specific Page
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page to return
          required: true
          type: string
          format: uuid4
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SinglePage'
  '/pages/{page_id}/versions':
    get:
      tags:
        - pages and versions
      summary: Get all the Versions for a specific Page
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page to return
          required: true
          type: string
          format: uuid4
        - $ref: '#/parameters/chunk'
        - $ref: '#/parameters/chunk_size'
        - $ref: '#/parameters/include_total'
        - $ref: '#/parameters/sort'
        - name: capture_time
          in: query
          description: >-
            filter by capture time; may also be specified as a range given as
            time..time such as 2017-04-01T10:00Z..2017-04-01T12:00Z
          required: false
          type: string
        - name: source_metadata[:key]
          type: string
          in: query
          description: >
            Filter results by a given `key` in the `source_metadata` field. You
            can include this parameter multiple times to filter by more than
            one `key`. *Note that this field is not indexed, so these queries
            can be slow.* Examples…

            - `/api/v0/versions?source_metadata[version_id]=12345678`

            - `/api/v0/versions?source_metadata[account]=versionista1&source_metadata[has_content]=true`
        - name: different
          in: query
          description: >-
            If false, include all versions, not just ones that are different from their preceding version.
          required: false
          type: string
          default: true
        - name: include_change_from_previous
          in: query
          type: boolean
          required: false
          default: false
          description: >
            If present, include a `change_from_previous` field in the result
            that represents a change object between this version and the
            previous version of this page.
        - name: include_change_from_earliest
          in: query
          type: boolean
          required: false
          default: false
          description: >
            If present, include a `change_from_earliest` field in the result
            that represents a change object between this version and the
            earliest version of this page.
        - name: status
          in: query
          type: string
          required: false
          description: >-
            Include only versions with the given HTTP status code, e.g. `200` or
            `404`. You may also specify a range using standard mathematical
            notation for intervals. For example, to get all 4XX status versions:

                ?status=[400,500)
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/PageOfVersions'
    post:
      tags:
        - pages and versions
      summary: Submit one new Version (see also imports)
      description: >-
        Add a single new version of a page to the database. For importing
        multiple versions at a time, use the `/imports` API.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page to return
          required: true
          type: string
          format: uuid4
        - name: uuid
          in: query
          description: uuid of new Version to store
          required: true
          type: string
          format: uuid4
        - name: capture_time
          in: query
          description: capture_time new Version to store
          required: true
          type: string
          format: datetime
        - name: uri
          in: query
          description: URI of content of new Version to store
          required: true
          type: string
        - name: version_hash
          in: query
          description: sha256 hash of Version content
          required: true
          type: string
        - name: source_type
          in: query
          description: 'source, such as internet_archive'
          required: true
          type: string
        - name: source_metadata
          in: query
          description: >-
            A JSON blob containing extra source specific information.  This
            field is free-form, but we generally expect the data will follow
            one of the formats documented under the models section that has a
            name starting with "source_metadata_" For example:
            source_metadata_versionista
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleVersion'
  '/pages/{page_id}/versions/{version_id}':
    get:
      tags:
        - pages and versions
      summary: Get a specific Version
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page whose Version this is
          required: true
          type: string
          format: uuid4
        - name: version_id
          in: path
          description: ID of the Version to show
          required: true
          type: string
          format: uuid4
        - name: include_change_from_previous
          in: query
          type: boolean
          required: false
          default: false
          description: >
            If present, include a `change_from_previous` field in the result
            that represents a change object between this version and the
            previous version of this page.
        - name: include_change_from_earliest
          in: query
          type: boolean
          required: false
          default: false
          description: >
            If present, include a `change_from_earliest` field in the result
            that represents a change object between this version and the
            earliest version of this page.
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleVersion'
  '/pages/{page_id}/changes':
    get:
      tags:
        - changes
      summary: List Changes between two Versions on a page
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page whose Change this is
          required: true
          type: string
          format: uuid4
        - $ref: '#/parameters/chunk'
        - $ref: '#/parameters/chunk_size'
        - $ref: '#/parameters/include_total'
        - $ref: '#/parameters/sort'
        - name: priority
          in: query
          description: Only include changes with a matching `priority`. This can be a number (to get an exact match) or an interval using standard mathematical syntax, e.g. `[0.3,0.6)` for `0.3 <= priority < 0.6`. You can leave out the start or end, e.g. `[0.3,]` for `priority >= 0.3`.
          required: false
          type: number
        - name: significance
          in: query
          description: Only include changes with a matching `significance`. This can be a number (to get an exact match) or an interval using standard mathematical syntax, e.g. `[0.3,0.6)` for `0.3 <= significance < 0.6`. You can leave out the start or end, e.g. `[0.3,]` for `significance >= 0.3`.
          required: false
          type: number
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/PageOfChanges'
  '/pages/{page_id}/changes/{from_version}..{to_version}':
    get:
      tags:
        - changes
      summary: Get a Change between two Versions
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page whose Change this is
          required: true
          type: string
          format: uuid4
        - name: from_version
          in: path
          description: ID of the "before" Version. If omitted, it will be treated as the version immediately prior to `to_version`.
          required: false
          type: string
          format: uuid4
        - name: to_version
          in: path
          description: ID of the "after" Version
          required: true
          type: string
          format: uuid4
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleChange'
  '/pages/{page_id}/changes/{from_version}..{to_version}/annotations':
    get:
      tags:
        - changes
      summary: List Anonotations for a Change between two Versions
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page whose Version this is
          required: true
          type: string
          format: uuid4
        - name: from_version
          in: path
          description: >-
            ID of the "before" Version. If omitted, it will be treated as the
            version immediately prior to `to_version`.
          required: false
          type: string
          format: uuid4
        - name: to_version
          in: path
          description: ID of the "after" Version
          required: true
          type: string
          format: uuid4
        - $ref: '#/parameters/chunk'
        - $ref: '#/parameters/chunk_size'
        - $ref: '#/parameters/include_total'
        - $ref: '#/parameters/sort'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/PageOfAnnotations'
    post:
      tags:
        - changes
      summary: Add/update an annotation on a Change between two versions
      description: >-
        The POST body should be a JSON object containing any data desired.

        Users can only make one annotation per Change. If the currently
        signed-in user has not annotated the change between these two versions,
        a new annotation will be created, otherwise their previous annotation
        will be replaced.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page whose Change this is
          required: true
          type: string
          format: uuid4
        - name: from_version
          in: path
          description: >-
            ID of the "before" Version. If omitted, it will be treated as the
            version immediately prior to `to_version`.
          required: false
          type: string
          format: uuid4
        - name: to_version
          in: path
          description: ID of the "after" Version
          required: true
          type: string
          format: uuid4
        - name: annotation
          in: body
          required: true
          schema: {}
          description: >-
            The body is the annotation you wish to add to the change. It is a
            JSON object with keys and values desired.
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Annotation'
  '/pages/{page_id}/changes/{from_version}..{to_version}/annotations/{annotation_id}':
    get:
      tags:
        - changes
      summary: Single Anonotations for a Change between two Versions
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page whose Version this is
          required: true
          type: string
          format: uuid4
        - name: from_version
          in: path
          description: >-
            ID of the "before" Version. If omitted, it will be treated as the
            version immediately prior to `to_version`.
          required: false
          type: string
          format: uuid4
        - name: to_version
          in: path
          description: ID of the "after" Version
          required: true
          type: string
          format: uuid4
        - name: annotation_id
          in: path
          description: ID of the annotation
          required: true
          type: string
          format: uuid4
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleAnnotation'
  '/pages/{page_id}/changes/{from_version}..{to_version}/diff/{diff_type}':
    get:
      tags:
        - changes
      summary: Generate a diff between the two versions in a change.
      description: >-
        The system can generate diffs according to a variety of algorithms. Most of these are provided by the `web-monitoring-processing` project. Some diffs can take query parameters for greater customization.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page whose versions are being diffed
          required: true
          type: string
          format: uuid4
        - name: from_version
          in: path
          description: >-
            ID of the "before" Version. If omitted, it will be treated as the
            version immediately prior to `to_version`.
          required: false
          type: string
          format: uuid4
        - name: to_version
          in: path
          description: ID of the "after" Version
          required: true
          type: string
          format: uuid4
        - name: diff_type
          in: path
          description: >
            Type of diff to generate. Possible values are…
              * `length` - the difference between length, in bytes, of each version
              * `identical_bytes` - a boolean indicating whether the two versions are identical
              * `side_by_side_text` - the visible text of each version formatted as
                ```
                {a_text: "string", b_text: "string"}
                ```
              * `html_source` - additions and removals to the actual source code, formatted as:
                  ```
                  [
                    [-1, "some text that was removed"],
                    [1, "some text that was added"],
                    [0, "some text that was not changed"],
                    [1, "some text that was added"],
                    // and so on
                  ]
                  ```
              * `html_text` - additions and removals to the visible text on the page, formatted as:
                  ```
                  [
                    [-1, "some text that was removed"],
                    [1, "some text that was added"],
                    [0, "some text that was not changed"],
                    [1, "some text that was added"],
                    // and so on
                  ]
                  ```
              * `html_visual` - an HTML page with differences marked up. This is meant to be rendered directly in a web browser.
          required: true
          type: string
          enum:
            - length
            - identical_bytes
            - side_by_side_text
            - html_source
            - html_text
            - html_visual
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Diff'

  '/pages/{page_id}/maintainers':
    get:
      tags:
        - pages and versions
      summary: Get all the maintainers of a specific Page
      description: >
        Maintainers are individuals or organizations who manage
        or publish a Page.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page to return maintainers for
          required: true
          type: string
          format: uuid4
        - $ref: '#/parameters/chunk'
        - $ref: '#/parameters/chunk_size'
        - $ref: '#/parameters/include_total'
        - $ref: '#/parameters/sort'
        - name: parent
          in: query
          description: >-
            Only return maintainers whose parent has this UUID.
          required: false
          type: string
          format: uuid4
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/PageOfMaintainerships'
    post:
      tags:
        - pages and versions
      summary: Add a maintainer to a page
      description: >
        Add a maintainer to a page. The maintainer can be a pre-existing one attached to another page or it can be a completely new maintainer.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page to return maintainers for
          required: true
          type: string
          format: uuid4
        - name: '[body]'
          in: body
          description: >
            The request body should be a JSON object. If the
            `uuid` parameter is specified, all others will be
            ignored.
          required: true
          schema:
            $ref: '#/definitions/MaintainerPost'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleMaintainership'

  '/pages/{page_id}/maintainers/{maintainer_id}':
    get:
      tags:
        - pages and versions
      summary: Get a maintainer as attached to a page
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page to return maintainers for
          required: true
          type: string
          format: uuid4
        - name: maintainer_id
          in: path
          description: ID of the maintainer to get
          required: true
          type: string
          format: uuid4
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleMaintainership'
    delete:
      tags:
        - pages and versions
      summary: Remove a maintainer from a page
      description: >-
        Removes a maintainer from a page. This does not actually
        delete the maintainer itself.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page to remove the maintainer from
          required: true
          type: string
          format: uuid4
        - name: maintainer_id
          in: path
          description: ID of the maintainer to remove
          required: true
          type: string
          format: uuid4
      responses:
        '302':
          description: On success, you will be redirected to the list of all maintainers on the page.

  '/pages/{page_id}/tags':
    get:
      tags:
        - pages and versions
      summary: Get all the tags on a specific Page
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page to return tags for
          required: true
          type: string
          format: uuid4
        - $ref: '#/parameters/chunk'
        - $ref: '#/parameters/chunk_size'
        - $ref: '#/parameters/include_total'
        - $ref: '#/parameters/sort'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/PageOfTaggings'
    post:
      tags:
        - pages and versions
      summary: Add a tag to a page
      description: >
        Add a tag to a page. The tag can be a pre-existing one attached to another page or it can be a completely new tag.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page to add the tag to
          required: true
          type: string
          format: uuid4
        - name: '[body]'
          in: body
          description: >
            The request body should be a JSON object. If the
            `uuid` parameter is specified, all others will be
            ignored.
          required: true
          schema:
            $ref: '#/definitions/TagPost'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleTagging'

  '/pages/{page_id}/tags/{tag_id}':
    get:
      tags:
        - pages and versions
      summary: Get a tag as attached to a particular page.
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page to return tags for
          required: true
          type: string
          format: uuid4
        - name: tag_id
          in: path
          description: ID of the tag to get
          required: true
          type: string
          format: uuid4
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleTagging'
    delete:
      tags:
        - pages and versions
      summary: Remove a tag from a page
      description: >-
        Removes a tag from a page. This does not actually
        delete the tag itself.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page to remove the tag from
          required: true
          type: string
          format: uuid4
        - name: tag_id
          in: path
          description: ID of the tag to remove
          required: true
          type: string
          format: uuid4
      responses:
        '302':
          description: On success, you will be redirected to the list of all tags on the page.

  /versions:
    get:
      tags:
        - pages and versions
      summary: Get all the Versions
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/chunk'
        - $ref: '#/parameters/chunk_size'
        - $ref: '#/parameters/include_total'
        - $ref: '#/parameters/sort'
        - name: capture_time
          in: query
          description: >-
            filter by capture time; may also be specified as a range given as
            time..time such as 2017-04-01T10:00Z..2017-04-01T12:00Z
          required: false
          type: string
        - name: source_type
          in: query
          description: Filter by source_type.
          required: false
          type: string
        - name: hash
          in: query
          description: Filter by version_hash.
          required: false
          type: string
        - name: source_metadata[:key]
          in: query
          description: >
            Filter results by a given `key` in the `source_metadata` field. You
            can include this parameter multiple times to filter by more than
            one `key`. *Note that this field is not indexed, so these queries
            can be slow.* Examples…

            - `/api/v0/versions?source_metadata[version_id]=12345678`

            - `/api/v0/versions?source_metadata[account]=versionista1&source_metadata[has_content]=true`
        - name: include_change_from_previous
          in: query
          type: boolean
          required: false
          default: false
          description: >
            If present, include a `change_from_previous` field in the result
            that represents a change object between this version and the
            previous version of this page.
        - name: include_change_from_earliest
          in: query
          type: boolean
          required: false
          default: false
          description: >
            If present, include a `change_from_earliest` field in the result
            that represents a change object between this version and the
            earliest version of this page.
        - name: status
          in: query
          type: string
          required: false
          description: >-
            Include only versions with the given HTTP status code, e.g. `200` or
            `404`. You may also specify a range using standard mathematical
            notation for intervals. For example, to get all 4XX status versions:

                ?status=[400,500)
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/PageOfVersions'
  '/versions/{version_id}':
    get:
      tags:
        - pages and versions
      summary: Get a specific Version
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: version_id
          in: path
          description: ID of Version to return
          required: true
          type: string
          format: uuid4
        - name: include_change_from_previous
          in: query
          type: boolean
          required: false
          default: false
          description: >
            If present, include a `change_from_previous` field in the result
            that represents a change object between this version and the
            previous version of this page.
        - name: include_change_from_earliest
          in: query
          type: boolean
          required: false
          default: false
          description: >
            If present, include a `change_from_earliest` field in the result
            that represents a change object between this version and the
            earliest version of this page.
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleVersion'
  '/versions/{version_id}/raw':
    get:
      tags:
        - pages and versions
      summary: Get the raw response body for a version.
      description: >
        Returns the originally captured HTTP response body for a version.
        Note this is only the body; the status code and header reflect
        information about the API server, not the original response. For
        metadata and headers of the original response, use the
        `/versions/{version_id}` route.

        Unlike other API responses, the `Content-Type` may not be
        `application/json`. Instead, it will be the appropriate type for
        the response body, or `application/octet-stream` if the orignal
        response had no content type or the content type was not captured.
      parameters:
        - name: version_id
          in: path
          description: ID of Version to return
          required: true
          type: string
          format: uuid4
      responses:
        '200':
          description: successful operation
  /imports/:
    post:
      tags:
        - imports
      summary: Submit a batch of Versions to create
      description: >-
        Send a list of version objects to be imported into the database. The list can be a newline-delimited JSON stream (sent with the `application/x-json-stream` content type) or a JSON array (sent with `application/json` content type). The stream is preferable, since processing many versions using it is more efficient. Each version object should conform to the `ImportableVersion` schema below.

        You may send as many versions as you like, but we recommend chunking your import into POSTs of no more than 1,000 versions each to keep things manageable.
      consumes:
        - application/json
        - application/x-json-stream
      produces:
        - application/json
      parameters:
        - name: update
          in: query
          type: string
          enum:
            - skip
            - replace
            - merge
          default: skip
          required: false
          description: >
            Specifies how versions that are already in the database (i.e. versions with the same `capture_time` and `source_type`) should be handled.
              * `skip` (default value) Don’t import the version or modify the existing database entry
              * `replace` Replace the existing database entry with the imported one
              * `merge` Similar to `replace`, but merges the values in `source_metadata`
        - name: create_pages
          in: query
          type: boolean
          default: true
          required: false
          description: >-
            If set to false, the importer will not create new page records. If the POSTed data contains a version with a `page_url` field that doesn’t match an known page, the version will be skipped and not imported at all.
        - name: skip_unchanged_versions
          in: query
          description: >-
            If set to true, the importer will not import versions of a page that have the same hash as the version captured immediately before them (*from the same source*).
          required: false
          type: string
          default: false
        - in: body
          name: versions
          required: true
          description: The body should be a JSON array or newline-delimited stream of `Importableversion` objects (see definition in “Models” section below).
          schema:
            $ref: "#/definitions/ImportableVersion"
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ImportStatus'
  '/imports/{import_id}':
    get:
      tags:
        - imports
      summary: Query the status of a batch import job
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: import_id
          in: path
          description: 'ID of import job, from the response to the submission'
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ImportStatus'

  '/maintainers':
    get:
      tags:
        - maintainers
      summary: Get all maintainers
      description: >
        Maintainers are individuals or organizations who manage
        or publish a Page.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/chunk'
        - $ref: '#/parameters/chunk_size'
        - $ref: '#/parameters/include_total'
        - $ref: '#/parameters/sort'
        - name: parent
          in: query
          description: >-
            Only return maintainers whose parent has this UUID.
          required: false
          type: string
          format: uuid4
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/PageOfMaintainers'
    post:
      tags:
        - maintainers
      summary: Add a maintainer
      description: >-
        Add a maintainer. This does not associate the maintainer
        with a particular page. Usually you will want to POST
        to `/pages/{page_id}/maintainers` instead, which will
        create the maintainer if it does not already exist.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page to return maintainers for
          required: true
          type: string
          format: uuid4
        - name: '[body]'
          in: body
          description: >-
            The request body should be a JSON object. For this
            endpoint, the `uuid` parameter is not supported.
          required: true
          schema:
            $ref: '#/definitions/MaintainerPost'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleMaintainer'

  '/maintainers/{maintainer_id}':
    get:
      tags:
        - maintainers
      summary: Get a maintainer
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: maintainer_id
          in: path
          description: ID of the maintainer to get
          required: true
          type: string
          format: uuid4
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleMaintainer'

    patch:
      tags:
        - maintainers
      summary: Update a maintainer
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: maintainer_id
          in: path
          description: ID of the maintainer to update
          required: true
          type: string
          format: uuid4
        - name: '[body]'
          in: body
          description: >-
            The request body should be a JSON object.
          required: true
          schema:
            $ref: '#/definitions/MaintainerPost'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleMaintainer'

  '/tags':
    get:
      tags:
        - tags
      summary: Get all tags
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/chunk'
        - $ref: '#/parameters/chunk_size'
        - $ref: '#/parameters/include_total'
        - $ref: '#/parameters/sort'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/PageOfTags'
    post:
      tags:
        - tags
      summary: Add a tag
      description: >
        Add a tag. This does not associate the tag
        with a particular page. Usually you will want to POST
        to `/pages/{page_id}/tags` instead, which will
        create the tag if it does not already exist.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page_id
          in: path
          description: ID of Page to return tags for
          required: true
          type: string
          format: uuid4
        - name: '[body]'
          in: body
          description: >
            The request body should be a JSON object. For this
            endpoint, the `uuid` parameter is not supported.
          required: true
          schema:
            $ref: '#/definitions/TagPost'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleMaintainer'

  '/tags/{tag_id}':
    get:
      tags:
        - tags
      summary: Get a tag
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tag_id
          in: path
          description: ID of the tag to get
          required: true
          type: string
          format: uuid4
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleTag'

    patch:
      tags:
        - tags
      summary: Update a tag
      description: ''
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tag_id
          in: path
          description: ID of the tag to update
          required: true
          type: string
          format: uuid4
        - name: '[body]'
          in: body
          description: >
            The request body should be a JSON object.
          required: true
          schema:
            $ref: '#/definitions/TagPost'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SingleTag'

definitions:
  Version:
    type: object
    properties:
      uuid:
        type: string
        format: uuid4
      page_uuid:
        type: string
        format: uuid4
      capture_time:
        type: string
        format: datetime
        description: The time that the version was captured at.
      capture_url:
        type: string
        format: uri
        description: >
          The exact URL the version was originally captured at. A page may
          capture versions from several URLs that are *effectively* the same,
          but the `capture_url` on Version gives the exact URL.
      uri:
        type: string
        format: uri
        description: A URL from which to retrieve the raw content of the version.
      version_hash:
        type: string
        description: A SHA-256 hash of the version’s raw content.
      source_type:
        type: string
      source_metadata:
        type: object
        description: >-
          A JSON blob containing extra source specific information.  This
          field is free-form, but the data will generally follow one of the
          formats documented under the models section that has a name
          starting with "source_metadata_."  For example: source_metadata_versionista
  Page:
    type: object
    properties:
      uuid:
        type: string
        format: uuid4
      url:
        type: string
      url_key:
        type: string
        format: surt
        description: >
          A canonical version of the Page's URL. It is mostly used for
          determining whether versions from different capture_urls represent
          the same page, e.g. `http://epa.gov` vs. `https://epa.gov`. For more
          about the SURT format, see:
          http://crawler.archive.org/articles/user_manual/glossary.html#surt
      title:
        type: string
      site:
        type: string
      agency:
        type: string
      created_at:
        type: string
        format: datetime
      updated_at:
        type: string
        format: datetime
      latest:
        $ref: '#/definitions/Version'
      maintainers:
        type: array
        items:
          $ref: '#/definitions/Maintainership'
      tags:
        type: array
        items:
          $ref: '#/definitions/Tagging'
  Change:
    type: object
    properties:
      uuid:
        type: string
        format: uuid4
      uuid_from:
        type: string
        format: uuid4
      uuid_to:
        type: string
        format: uuid4
      priority:
        type: number
        format: float
      significance:
        type: number
        format: float
      current_annotation:
        type: object
      created_at:
        type: string
        format: datetime
      updated_at:
        type: string
        format: datetime
  Annotation:
    type: object
    properties:
      uuid:
        type: string
        format: uuid4
      author_id:
        type: number
        format: int64
      annotation:
        type: object
      from_version:
        type: string
        format: uuid4
      to_version:
        type: string
        format: uuid4
      created_at:
        type: string
        format: datetime
      updated_at:
        type: string
        format: datetime
  SinglePage:
    type: object
    properties:
      data:
        $ref: '#/definitions/Page'
  PageOfPages:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Page'
      links:
        type: object
        properties:
          first:
            type: string
            format: uri
          last:
            type: string
            format: uri
          prev:
            type: string
            format: uri
          next:
            type: string
            format: uri
  SingleVersion:
    type: object
    properties:
      data:
        $ref: '#/definitions/Version'
  PageOfVersions:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Version'
      links:
        type: object
        properties:
          first:
            type: string
            format: uri
          last:
            type: string
            format: uri
          prev:
            type: string
            format: uri
          next:
            type: string
            format: uri
  SingleChange:
    type: object
    properties:
      data:
        $ref: '#/definitions/Change'
      links:
        type: object
        properties:
          page:
            type: string
            format: uri
          from_version:
            type: string
            format: uri
          to_version:
            type: string
            format: uri
  PageOfChanges:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Change'
      links:
        type: object
        properties:
          first:
            type: string
            format: uri
          last:
            type: string
            format: uri
          prev:
            type: string
            format: uri
          next:
            type: string
            format: uri
  ImportStatus:
    type: object
    properties:
      data:
        type: object
        properties:
          user_id:
            type: number
            format: int64
          id:
            type: number
            format: int64
          status:
            type: string
          processing_errors:
            type: array
            items:
              type: string
          file:
            type: string
            format: uuid4
  SingleAnnotation:
    type: object
    properties:
      data:
        $ref: '#/definitions/Annotation'
  PageOfAnnotations:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Annotation'
  source_metadata_versionista:
    type: object
    properties:
      url:
        type: string
      account:
        type: string
      site_id:
        type: string
      page_id:
        type: string
      diff_hash:
        type: string
      version_id:
        type: string
      diff_length:
        type: integer
      has_content:
        type: boolean
      diff_with_first_url:
        type: string
      diff_with_previous_url:
        type: string
  Diff:
    type: object
    properties:
      data:
        type: object
        properties:
          page_id:
            type: string
            format: uuid4
          from_version_id:
            type: string
            format: uuid4
          to_version_id:
            type: string
            format: uuid4
          diff_service:
            type: string
          content:
            type: object
            description: Most responses contain this structure, but what is actually in `content` depends on the type of diff.
            properties:
              diff:
                type: object
              version:
                type: string

  Maintainership:
    type: object
    properties:
      uuid:
        type: string
        format: uuid4
      name:
        type: string
      parent_uuid:
        type: string
        format: uuid4
      assigned_at:
        type: string
        format: datetime

  Maintainer:
    type: object
    properties:
      uuid:
        type: string
        format: uuid4
      name:
        type: string
      parent_uuid:
        type: string
        format: uuid4
      created_at:
        type: string
        format: datetime
      updated_at:
        type: string
        format: datetime

  MaintainerPost:
    description: >-
      This data can be posted to create or update a maintainer.
      The `uuid` field is only valid when being used to attach
      a maintainer to a page, and if it is used, all other fields
      are ignored.
    type: object
    properties:
      uuid:
        type: string
        format: uuid4
      name:
        type: string
      parent_uuid:
        type: string
        format: uuid4

  SingleMaintainership:
    type: object
    properties:
      links:
        type: object
        properties:
          parent:
            type: string
            format: url
          children:
            type: string
            format: url
      data:
        $ref: '#/definitions/Maintainership'

  PageOfMaintainerships:
    type: object
    properties:
      links:
        type: object
        properties:
          first:
            type: string
            format: uri
          last:
            type: string
            format: uri
          prev:
            type: string
            format: uri
          next:
            type: string
            format: uri
      data:
        type: array
        items:
          $ref: '#/definitions/Maintainership'

  SingleMaintainer:
    type: object
    properties:
      links:
        type: object
        properties:
          parent:
            type: string
            format: url
          children:
            type: string
            format: url
      data:
        $ref: '#/definitions/Maintainer'

  PageOfMaintainers:
    type: object
    properties:
      links:
        type: object
        properties:
          first:
            type: string
            format: uri
          last:
            type: string
            format: uri
          prev:
            type: string
            format: uri
          next:
            type: string
            format: uri
      data:
        type: array
        items:
          $ref: '#/definitions/Maintainer'

  Tagging:
    type: object
    properties:
      uuid:
        type: string
        format: uuid4
      name:
        type: string
      assigned_at:
        type: string
        format: datetime

  Tag:
    type: object
    properties:
      uuid:
        type: string
        format: uuid4
      name:
        type: string
      created_at:
        type: string
        format: datetime
      updated_at:
        type: string
        format: datetime

  TagPost:
    description: >-
      This data can be posted to create or update a tag.
      The `uuid` field is only valid when being used to attach
      a tag to a page, and if it is used, all other fields
      are ignored.
    type: object
    properties:
      uuid:
        type: string
        format: uuid4
      name:
        type: string

  SingleTagging:
    type: object
    properties:
      data:
        $ref: '#/definitions/Tagging'

  PageOfTaggings:
    type: object
    properties:
      links:
        type: object
        properties:
          first:
            type: string
            format: uri
          last:
            type: string
            format: uri
          prev:
            type: string
            format: uri
          next:
            type: string
            format: uri
      data:
        type: array
        items:
          $ref: '#/definitions/Tagging'

  SingleTag:
    type: object
    properties:
      data:
        $ref: '#/definitions/Tag'

  PageOfTags:
    type: object
    properties:
      links:
        type: object
        properties:
          first:
            type: string
            format: uri
          last:
            type: string
            format: uri
          prev:
            type: string
            format: uri
          next:
            type: string
            format: uri
      data:
        type: array
        items:
          $ref: '#/definitions/Tag'

  ImportableVersion:
    type: object
    properties:
      page_url:
        type: string
        format: uri
        description: The original URL the version was captured from.
      page_maintainers:
        type: array
        items:
          type: string
        description: A list of names for individuals, organizations, etc. who are responsible for maintaining the page being captured. E.g. "EPA" for the page at `https://epa.gov/`.
      page_tags:
        type: array
        items:
          type: string
        description: A list of tags to apply to the page.
      title:
        type: string
        description: The page or document title for the version.
      capture_time:
        type: string
        format: date-time
        description: The time at which the version was captured.
      uri:
        type: string
        format: uri
        description: A URL at which to get the raw response body of the version at `capture_time`.
      version_hash:
        type: string
        description: A hex-encoded SHA-256 hash of the response body of the version.
      source_type:
        type: string
        description: An identifier for the source of this version data, e.g. `versionista`, `internet_archive`, etc.
      source_metadata:
        type: object
        description: Any additional metadata that you'd like to store. Typically, this is things like unique IDs from the source system (e.g. the site/page/version ID in Versionista), headers, content lengths, redirect chains, etc. The intent is that you should store as rich a set of metadata as you can get for every version, and this gives you a space to put all the information that we can't guarantee must be available from every type of source.

externalDocs:
  description: Find out more about the web-monitoring project.
  url: 'https://github.com/edgi-govdata-archiving/web-monitoring'
